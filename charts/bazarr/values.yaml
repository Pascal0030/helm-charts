## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker Image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters
## @param nameOverride String to partially override bazarr.fullname
nameOverride: ""
## @param fullnameOverride String to fully override bazarr.fullname
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @section bazarr image parameters
image:
  ## @param image.registry bazarr image registry
  registry: docker.io
  ## @param image.repository bazarr image repository
  repository: linuxserver/bazarr
  ## @param image.tag bazarr image tag (immutable tags are recommended)
  tag: "latest"
  ## @param image.pullPolicy bazarr image pull policy
  imagePullPolicy: Always

## @section bazarr Authentication parameters
auth:
  ## @param create service account for bazarr
  saEnabled: true

## @section bazarr configuration parameters
config:
  ## @param config.logLevel bazarr log level (trace, debug, info, warn, error, fatal)
  logLevel: debug
  ## @param config.existingConfigMap Name of existing ConfigMap with NZBGet configuration (use secret or existing configmap but not both)
  existingConfigMap: ""
  ## @param config.existingSecret Name of existing secret with the NZBGet configuration
  existingSecret: ""
  ## @param config.useExternalSecret Use ExternalSecret to template the nzbget.conf with secrets from a the configmap and secrets manager
  useExternalSecret: false
  externalSecret:
    refreshInterval: 1h
    secretStoreRef:
      name: ""
      kind: ""
    target:
      template:
        engineVersion: v2
    data: []
    ## - secretKey: username
    ##   remoteRef:
    ##     key: ""
    ## - secretKey: password
    ##   remoteRef:
    ##     key: ""
  ## @param config.bazarrconfig set all configuration parameters
  bazarrconfig: |
    addic7ed:
      cookies: ''
      password: ''
      user_agent: ''
      username: ''
      vip: false
    analytics:
      enabled: true
    anidb:
      api_client: ''
      api_client_ver: 1
    animetosho:
      anidb_api_client: ''
      anidb_api_client_ver: 1
      search_threshold: 6
    anticaptcha:
      anti_captcha_key: ''
    assrt:
      token: ''
    auth:
      apikey: 04f7f0537fb8c30a261190714acca9c3
      password: 2a9318085631caebaabe1685853c5487
      type: form
      username: admin
    avistaz:
      cookies: ''
      user_agent: ''
    backup:
      day: 6
      folder: /config/backup
      frequency: Weekly
      hour: 3
      retention: 31
    betaseries:
      token: ''
    cinemaz:
      cookies: ''
      user_agent: ''
    cors:
      enabled: false
    deathbycaptcha:
      password: ''
      username: ''
    embeddedsubtitles:
      fallback_lang: en
      hi_fallback: false
      included_codecs: []
      timeout: 600
      unknown_as_fallback: false
    general:
      adaptive_searching: true
      adaptive_searching_delay: 3w
      adaptive_searching_delta: 1w
      anti_captcha_provider: null
      auto_update: true
      base_url: ''
      branch: development
      chmod: '0640'
      chmod_enabled: false
      days_to_upgrade_subs: 7
      debug: false
      default_und_audio_lang: ''
      default_und_embedded_subtitles_lang: ''
      dont_notify_manual_actions: false
      embedded_subs_show_desired: true
      embedded_subtitles_parser: ffprobe
      enabled_integrations: []
      enabled_providers:
      flask_secret_key: 865ab33284d6f42fc29a03a8e79ae08b
      hi_extension: hi
      ignore_ass_subs: false
      ignore_pgs_subs: false
      ignore_vobsub_subs: false
      ip: '*'
      language_equals: []
      minimum_score: 90
      minimum_score_movie: 70
      movie_default_enabled: true
      movie_default_profile: 1
      movie_tag_enabled: false
      multithreading: true
      page_size: 25
      parse_embedded_audio_track: false
      path_mappings: []
      path_mappings_movie: []
      port: 6767
      postprocessing_cmd: ''
      postprocessing_threshold: 90
      postprocessing_threshold_movie: 70
      remove_profile_tags: []
      serie_default_enabled: true
      serie_default_profile: 1
      serie_tag_enabled: false
      single_language: false
      skip_hashing: false
      subfolder: current
      subfolder_custom: ''
      subzero_mods: ''
      theme: auto
      upgrade_frequency: 12
      upgrade_manual: true
      upgrade_subs: true
      use_embedded_subs: true
      use_plex: false
      use_postprocessing: false
      use_postprocessing_threshold: false
      use_postprocessing_threshold_movie: false
      use_radarr: true
      use_scenename: true
      use_sonarr: false
      utf8_encode: true
      wanted_search_frequency: 6
      wanted_search_frequency_movie: 6
    hdbits:
      passkey: ''
      username: ''
    jimaku:
      api_key: ''
      enable_ai_subs: false
      enable_archives_download: false
      enable_name_search_fallback: true
    karagarga:
      f_password: ''
      f_username: ''
      password: ''
      username: ''
    ktuvit:
      email: ''
      hashed_password: ''
    legendasdivx:
      password: ''
      skip_wrong_fps: false
      username: ''
    legendasnet:
      password: ''
      username: ''
    log:
      exclude_filter: ''
      ignore_case: false
      include_filter: ''
      use_regex: false
    movie_scores:
      audio_codec: 3
      edition: 1
      hash: 119
      hearing_impaired: 1
      release_group: 13
      resolution: 2
      source: 7
      streaming_service: 1
      title: 60
      video_codec: 2
      year: 30
    napiprojekt:
      only_authors: false
      only_real_names: false
    napisy24:
      password: ''
      username: ''
    opensubtitles:
      password: ''
      skip_wrong_fps: false
      ssl: false
      timeout: 15
      use_tag_search: false
      username: ''
      vip: false
    opensubtitlescom:
      include_ai_translated: true
      password: ''
      use_hash: true
      username: ''
    plex:
      apikey: ''
      auth_method: apikey
      disable_auto_migration: false
      email: ''
      encryption_key: kbPZwzoPTSF9ECcdNozPOzaFijtxXTusnwVUQWZZqgc
      ip: 127.0.0.1
      migration_attempted: false
      migration_successful: false
      migration_timestamp: ''
      movie_library: ''
      port: 32400
      series_library: ''
      server_local: false
      server_machine_id: ''
      server_name: ''
      server_url: ''
      set_episode_added: false
      set_movie_added: false
      ssl: false
      token: ''
      update_movie_library: false
      update_series_library: false
      user_id: ''
      username: ''
    podnapisi:
      verify_ssl: true
    postgresql:
      database: ''
      enabled: false
      host: localhost
      password: ''
      port: 5432
      username: ''
    proxy:
      exclude:
      - localhost
      - 127.0.0.1
      password: ''
      port: ''
      type: null
      url: ''
      username: ''
    radarr:
      apikey: ''
      base_url: ''
      defer_search_signalr: false
      excluded_tags: []
      full_update: Daily
      full_update_day: 6
      full_update_hour: 4
      http_timeout: 60
      ip: 127.0.0.1
      movies_sync: 60
      only_monitored: false
      port: 7878
      ssl: false
      sync_only_monitored_movies: false
      use_ffprobe_cache: true
    series_scores:
      audio_codec: 3
      episode: 30
      hash: 359
      hearing_impaired: 1
      release_group: 14
      resolution: 2
      season: 30
      series: 180
      source: 7
      streaming_service: 1
      video_codec: 2
      year: 90
    sonarr:
      apikey: ''
      base_url: /
      defer_search_signalr: false
      exclude_season_zero: false
      excluded_series_types: []
      excluded_tags: []
      full_update: Daily
      full_update_day: 6
      full_update_hour: 4
      http_timeout: 60
      ip: 127.0.0.1
      only_monitored: false
      port: 8989
      series_sync: 60
      ssl: false
      sync_only_monitored_episodes: false
      sync_only_monitored_series: false
      use_ffprobe_cache: true
    subdl:
      api_key: ''
    subf2m:
      user_agent: ''
      verify_ssl: true
    subsync:
      checker:
        blacklisted_languages: []
        blacklisted_providers: []
      debug: false
      force_audio: false
      gss: true
      max_offset_seconds: 60
      no_fix_framerate: true
      subsync_movie_threshold: 70
      subsync_threshold: 90
      use_subsync: false
      use_subsync_movie_threshold: false
      use_subsync_threshold: false
    titlovi:
      password: ''
      username: ''
    titulky:
      approved_only: false
      password: ''
      skip_wrong_fps: false
      username: ''
    translator:
      default_score: 50
      gemini_key: ''
      gemini_model: gemini-2.0-flash
      lingarr_url: http://lingarr:9876
      translator_info: true
      translator_type: google_translate
    turkcealtyaziorg:
      cookies: ''
      user_agent: ''
    whisperai:
      endpoint: http://127.0.0.1:9000
      loglevel: INFO
      pass_video_name: false
      response: 5
      timeout: 3600
    xsubs:
      password: ''
      username: ''


## @section bazarr service parameters
service:
  ## @param service.type bazarr service type
  type: ClusterIP
  ## @param service.port bazarr service port
  port: 6767
  ## @param service.nodePort Node port for bazarr service
  nodePort: ""
  ## @param service.clusterIP Static cluster IP or "None" for headless service
  clusterIP: ""
  ## @param service.annotations Additional custom annotations for bazarr service
  annotations: {}

## @section Persistence parameters
persistence:
  ## @param persistence.enabled Enable bazarr data persistence using PVC
  enabled: true
  ## @param persistence.storageClass PVC Storage Class for bazarr data volume
  storageClass: ""
  ## @param persistence.accessModes PVC Access modes
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size PVC Storage Request for bazarr data volume
  size: 2Gi
  ## @param persistence.annotations Additional custom annotations for the PVC
  annotations: {}
  ## @param persistence.selector Additional labels for the PVC
  selector: {}

## @section Pod Security Context
podSecurityContext:
  ## @param podSecurityContext.enabled Enable bazarr pod Security Context
  enabled: true
  ## @param podSecurityContext.fsGroup Set bazarr pod's Security Context fsGroup
  fsGroup: 1000

## @section Container Security Context
containerSecurityContext:
  ## @param containerSecurityContext.runAsUser Set bazarr container's Security Context runAsUser
  runAsUser: 1000
  ## @param containerSecurityContext.runAsGroup Set bazarr container's Security Context runAsGroup
  runAsGroup: 1000
  ## @param containerSecurityContext.runAsNonRoot Set bazarr container's Security Context runAsNonRoot
  runAsNonRoot: true
  ## @param containerSecurityContext.allowPrivilegeEscalation Set bazarr container's privilege escalation
  allowPrivilegeEscalation: true

## @section Resources parameters
resources: {}
  ## @param resources.limits The resources limits for the bazarr containers
  ## limits:
  ##   memory: 300Mi
  ## @param resources.requests The requested resources for the bazarr containers
  ## requests:
  ##   memory: 300Mi
  ##   cpu: 100m

## @section Extra Configs
## @param env A list of additional environment Variables
env:
  - name: TZ
    value: "Europe/Zurich"
## @param extraSecrets A list of additional existing secrets that will be mounted into the container
extraSecrets: []
##  - name: secret
##    defaultMode: 0440
##    mountPath: /mnt/secret
## @param extraConfigs A list of additional existing configMaps that will be mounted into the container
extraVolumes: []
##  - name: volume
##    mountPath: /mnt/tmp
##    pvcName: pvc-001
nfsVolumes: []
##  - name: plex-media
##    mountPath: /downloads
##    nfs:
##      server: 192.168.x.x
##      path: /downloads
extraConfigMaps: []
##  - name: extraConfigMap
##    mountPath: /mnt/tmp
##    subPath: example.conf
##    configMapName: pvc-001
extraSecrets: []
##  - name: mountName
##    mountPath: /mnt/tmp
##    subPath: example.conf
##    key: example-secret
##    path: path

## @section bazarr container's liveness probe parameters
livenessProbe:
  ## @param livenessProbe.enabled Enable livenessProbe on MariaDB containers
  enabled: true
  ## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  initialDelaySeconds: 30
  ## @param livenessProbe.periodSeconds Period seconds for livenessProbe
  periodSeconds: 10
  ## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  timeoutSeconds: 1
  ## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
  failureThreshold: 3
  ## @param livenessProbe.successThreshold Success threshold for livenessProbe
  successThreshold: 1

## @section bazarr container's readiness probe parameters
readinessProbe:
  ## @param readinessProbe.enabled Enable readinessProbe on MariaDB containers
  enabled: true
  ## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  ## @param readinessProbe.periodSeconds Period seconds for readinessProbe
  periodSeconds: 10
  ## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  timeoutSeconds: 1
  ## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
  failureThreshold: 3
  ## @param readinessProbe.successThreshold Success threshold for readinessProbe
  successThreshold: 1

## @section bazarr container's startup probe parameters
startupProbe:
  ## @param startupProbe.enabled Enable startupProbe on MariaDB containers
  enabled: false
  ## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  initialDelaySeconds: 30
  ## @param startupProbe.periodSeconds Period seconds for startupProbe
  periodSeconds: 10
  ## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
  timeoutSeconds: 1
  ## @param startupProbe.failureThreshold Failure threshold for startupProbe
  failureThreshold: 15
  ## @param startupProbe.successThreshold Success threshold for startupProbe
  successThreshold: 1

## @section Ingress parameters
ingress:
  ## @param ingress.enabled Enable ingress record generation for bazarr
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource
  annotations:
    kubernetes.io/hostname: bazarr.local
  ## @param ingress.hosts An array with hosts and paths
  hosts:
    - host: bazarr.local
      paths:
        - path: /
          pathType: Prefix
  ## @param ingress.tls TLS configuration for the Ingress
  tls: []

## @section Network Policy configuration
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  enabled: false
  ## @param networkPolicy.allowExternal Don't require client label for connections
  allowExternal: true
  ## @param networkPolicy.ingressNSMatchLabels Labels to match to allow traffic from other namespaces
  ingressNSMatchLabels: {}
  ## @param networkPolicy.ingressNSPodMatchLabels Pod labels to match to allow traffic from other namespaces
  ingressNSPodMatchLabels: {}
  
  destinations:
    nzbget:
      Port: 6789
      selectorLabels:
        app.kubernetes.io/name: nzbget
        app.kubernetes.io/instance: nzbget

metrics:
  ## @param metrics.enabled Enable the bazarr metrics exporter deployment
  enabled: false
  image:
    ## @param metrics.image Docker image for the bazarr metrics exporter
    registry: ghcr.io
    repository: onedr0p/exportarr
    tag: v2.3 # https://github.com/onedr0p/exportarr/pkgs/container/exportarr
    imagePullPolicy: IfNotPresent
  auth:
    ## @param auth.apiKey bazarr API key (4f2c460385004d6594414e3442j54c79)
    apiKey: ""
    ## @param auth.existingSecret Name of existing secret to use for NZBGet api key
    existingSecret:
      ## @param auth.existingSecret.secretName Name of the existing secret
      secretName: ""
      ## @param auth.existingSecret.secretKey Key in the existing secret that contains the api key
      secretKey: ""
  serviceMonitor:
    ## @param metrics.service.enabled Create a ServiceMonitor for the bazarr metrics exporter
    enabled: false
    ## @param metrics.service.port Port the ServiceMonitor should scrape
    interval: 4m
    ## @param metrics.service.scrapeTimeout Scrape timeout for the ServiceMonitor
    scrapeTimeout: 90s
    ## @param metrics.service.labels Additional labels for the ServiceMonitor
    labels: {}
    ## @param metrics.service.metricRelabelings Metric relabelings for the ServiceMonitor
    metricRelabelings: []
    ## @param metrics.service.relabelings Relabelings for the ServiceMonitor
    relabelings: []
  service:
    ## @param metrics.service.port Port the bazarr metrics exporter listens on
    port: 9707
    ## @param metrics.service.interval Scrape interval for the bazarr metrics exporter
    annotations: {}
  ## @param metrics.containerPort Port the bazarr metrics exporter container listens on
  containerPort: 9707
  resources: {}
    ## @param metrics.resources.limits The resources limits for the bazarr metrics exporter container
    ## limits:
    ##   cpu: 500m
    ##   memory: 256Mi
    ## @param metrics.resources.requests The requested resources for the bazarr metrics exporter container
    ## requests:
    ##   memory: 64Mi
    ##   cpu: 100m

## @section Pod configuration
podAnnotations: {}
podLabels: {}
nodeSelector: {}
tolerations: []
affinity: {}

## @param extraObjects Array of extra objects to deploy with the release
extraObjects: []
